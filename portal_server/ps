#!/usr/bin/perl
# udpmsg - send a message to the udpquotd server
use Digest::MD5 qw(md5 md5_hex md5_base64);

print "Content-type: text/html\n\n";

print "======debug start======<br>"; 
#----------
chomp (my $para=<STDIN>);
my ($username, $password, $wlanacip, $wlanuserip, @array, $temp,$wlanacname);
print "$para<br>";

@array = split(/&/,$para);
print "@array<br>";
foreach $temp (@array) 
{
  if ($temp =~ /wlanacip/) 
  {
      $temp  =~ s/wlanacip=//;
      $wlanacip = $temp;
  }
  elsif($temp =~ /wlanuserip/)
  {
      $temp =~ s/wlanuserip=//;
      $wlanuserip = $temp;
  }
  elsif($temp =~ /username/)
  {	
      $temp =~ s/username=//;
      $username = $temp;
  }
  elsif($temp =~ /password/)
  {
      $temp =~ s/password=//;
      $password = $temp;
  }
  elsif($temp =~ /wlanacname/)
  {
      $temp =~ s/wlanacname=//;
      $wlanacname = $temp;
  }
}
if($wlanacip!= "")
{
	goto HAVEACIP;
}
if($wlanacname=="")
{die {goto FAIL};}

open FILE,"/usr/local/ps/ps_ac.conf"
 or die "Can't open it";
@ip = grep {/$wlanacname/i}<FILE>;
$ip[0] =~ s/$wlanacname    //;
chomp(@ip);
$wlanacip = $ip[0];

foreach $var (sort(keys(%ENV))) {
    $val = $ENV{$var};
    $val =~ s|\n|\\n|g;
    $val =~ s|"|\\"|g;
    if((${var} =~ /REMOTE_ADDR/)&&($wlanacip==""))
    {
	$wlanacip = ${val};
    }
}
HAVEACIP:
print "ACIP:$wlanacip,USERIP:$wlanuserip, USERNAME:$username, PASSWORD:$password, WLANACNAME:$wlanacname<br>";
#----------

 
use IO::Socket;
 
my ( $sock, $port, $ipaddr, $hishost, $iparray, @iparray, 
     $MAXLEN, $PORTNO, $TIMEOUT, $serialno, $reqid, $req_challenge, $ack_challenge);
 
$MAXLEN  = 1024;
$PORTNO  = 2000;
$TIMEOUT = 2;
 
$reqid = 0;
$serialno = 1;

@iparray = split(/\./, $wlanuserip);
#print "wlanuserip : $wlanuserip @iparray<br>";

$req_challenge = pack ("C C C C n n C4 n C C", 1, 1, 0, 0, $serialno, $reqid, @iparray, 0, 0, 0);

print "REQ_CHALLENGE: ",unpack("H*",$req_challenge),"<br>";

$sock = IO::Socket::INET->new ( Proto     => 'udp',
                                PeerPort  => $PORTNO,
                                PeerAddr  => $wlanacip )
        or die {goto FAIL};
$sock->send ( $req_challenge ) or die {goto FAIL};
 
eval
{
    local $SIG{ALRM} = sub { die {goto FAIL} };
    alarm $TIMEOUT;
    $sock->recv ( $ack_challenge, $MAXLEN )      or die {goto FAIL};
    alarm 0;
    1;
# return value from eval on normalcy
} or die {goto FAIL};
 
( $port, $ipaddr ) = sockaddr_in ( $sock->peername );
$hishost = gethostbyaddr ( $ipaddr, AF_INET );

my ( $msg );
$msg = unpack("H*",$ack_challenge);

print "ACK_CHALLENGE: $msg<br>";
#-----------------------------
my ( $ucVer, $ucType, $ucAuthType, $ucRsv, $usSerialNo, $usReqID,
    @aucUserIP, $usUserPort, $ucErrCode, $ucAttrNum, $ATTR );

( $ucVer, $ucType, $ucAuthType, $ucRsv, $usSerialNo, $usReqID,
    $aucUserIP[0],$aucUserIP[1],$aucUserIP[2],$aucUserIP[3], $usUserPort, $ucErrCode, $ucAttrNum, $ATTR ) = 
    unpack("C C C C n n C4 n C C C*", $ack_challenge );


my ( $challenge_id, $chappassword, $data);

if(unpack("x16 C",$ack_challenge) == 3)
{
	$ATTR=substr($ack_challenge,18,16);
	print  "challenge:",unpack("H*", $ATTR),"<br>";
	$challenge_id=$ATTR;
	print "reqid:",$usReqID,"<br>";
	print "password:",$password,"<br>";
	$data .= pack("C", $usReqID);
	$data .= $password;
	$data .= $ATTR;	

 	print "data:",unpack("H*",$data),"<br>";
	$chappassword = md5($data);
	print "chappassword:",$chappassword,"<br>";
	print "chappassword:",unpack("H*",$chappassword),"<br>";
}
else
{
	die "FAIL!";
}

my ($req_auth);
$req_auth = pack ("C C C C n n C4 n C C C C A* C C", 1, 3, 0, 0, $serialno+1, $usReqID, @iparray, 0, 0, 2, 1, length($username)+2, $username, 4, 18);
$msg = $req_auth;
$req_auth = $msg.$chappassword;

print "REQ_AUTH: ",unpack("H*",$req_auth),"<br>";
$sock->send ( $req_auth ) or die "send: $!";

#---------------------------------
my ($ack_auth, $aff_auth_ack);
eval
{
    local $SIG{ALRM} = sub { die {goto FAIL} };
    alarm $TIMEOUT;
    $sock->recv ( $ack_auth, $MAXLEN )      or die {goto FAIL};
    alarm 0;
    1;
# return value from eval on normalcy
} or die {goto FAIL};

print "ACK_AUTH: ",unpack("H*",$ack_auth),"<br>";

my($ackauth_ucVer, $ackauth_ucType, $ackauth_ucAuthType, $ackauth_ucRsv, $ackauth_usSerialNo, $ackauth_usReqID,
    @ackauth_aucUserIP, $ackauth_usUserPort, $ackauth_ucErrCode, $ackauth_ucAttrNum);

($ackauth_ucVer, $ackauth_ucType, $ackauth_ucAuthType, $ackauth_ucRsv, $ackauth_usSerialNo, $ackauth_usReqID,
    @ackauth_aucUserIP, $ackauth_usUserPort, $ackauth_ucErrCode, $ackauth_ucAttrNum) = unpack("C C C C n n C4 n C C", $ack_auth);

if($ackauth_ucErrCode == 0)
{
	 $aff_auth_ack =  pack("C C C C n n C4 n C C",$ackauth_ucVer, 7, $ackauth_ucAuthType, $ackauth_ucRsv, $ackauth_usSerialNo, $ackauth_usReqID,
    		@ackauth_aucUserIP, $ackauth_usUserPort, $ackauth_ucErrCode, $ackauth_ucAttrNum);
	 print "AFF_AUTH_ACK: ",unpack("H*", $aff_auth_ack),"<br>";
	 $sock->send ( $aff_auth_ack ) or die "send: $!";
}
else
{
	goto FAIL;
}



print "======debug end======<br>";

print "<font color=\"#0000FF\">PORTAL AUTH SUCCESS</font>","<br>";
die;

FAIL:
print "======debug end======<br>";

print "<font color=\"#FF0000\">PORTAL AUTH FAIL!!!</font>","<br>";





